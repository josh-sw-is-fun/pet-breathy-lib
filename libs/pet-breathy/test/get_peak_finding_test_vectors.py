import scipy as sp
import numpy as np

def main():
    tests()
    #peak_finding_sandbox()

def find_peaks(x, height=None, threshold=None, distance=None,
        prominence=None, width=None, wlen=None, rel_height=0.5,
        plateau_size=None):
    peaks, left_edges, right_edges = _local_maxima_1d(x)
    
    #output_list(x, 'x')
    
    if height is not None:
        # Evaluate height condition
        peak_heights = x[peaks]
        hmin, hmax = _unpack_condition_args(height, x, peaks)
        keep = _select_by_property(peak_heights, hmin, hmax)
        peaks = peaks[keep]
        #properties["peak_heights"] = peak_heights
        #properties = {key: array[keep] for key, array in properties.items()}
    
    if distance is not None:
        # Evaluate distance condition
        keep = _select_by_peak_distance(peaks, x[peaks], distance)
        peaks = peaks[keep]
        #properties = {key: array[keep] for key, array in properties.items()}
    
    return peaks, {}

def output_list(l, name):
    print(f'>>> {name}:', ','.join([str(val) for val in l]))

def _unpack_condition_args(interval, x, peaks):
    try:
        imin, imax = interval
    except (TypeError, ValueError):
        imin, imax = (interval, None)

    # Reduce arrays if arrays
    if isinstance(imin, np.ndarray):
        if imin.size != x.size:
            raise ValueError('array size of lower interval border must match x')
        imin = imin[peaks]
    if isinstance(imax, np.ndarray):
        if imax.size != x.size:
            raise ValueError('array size of upper interval border must match x')
        imax = imax[peaks]

    return imin, imax

def _select_by_property(peak_properties, pmin, pmax):
    keep = np.ones(peak_properties.size, dtype=bool)
    if pmin is not None:
        keep &= (pmin <= peak_properties)
    if pmax is not None:
        keep &= (peak_properties <= pmax)
    return keep


def _select_by_peak_threshold(x, peaks, tmin, tmax):
    # Stack thresholds on both sides to make min / max operations easier:
    # tmin is compared with the smaller, and tmax with the greater threshold to
    # each peak's side
    stacked_thresholds = np.vstack([x[peaks] - x[peaks - 1],
                                    x[peaks] - x[peaks + 1]])
    keep = np.ones(peaks.size, dtype=bool)
    if tmin is not None:
        min_thresholds = np.min(stacked_thresholds, axis=0)
        keep &= (tmin <= min_thresholds)
    if tmax is not None:
        max_thresholds = np.max(stacked_thresholds, axis=0)
        keep &= (max_thresholds <= tmax)

    return keep, stacked_thresholds[0], stacked_thresholds[1]

def _select_by_peak_distance(
    peaks,
    priority,
    distance):
    '''
    - peaks Indexes of where peaks are located in x
    - midpoints are peaks in c++ (need to rename midpoints to peaks), they are the same thing as python peaks
    
    priority is x[peaks], the values of x at each peak index
    '''
    peaks_size = len(peaks)
    # Round up because actual peak distance can only be natural number
    distance_ = np.ceil(distance)
    keep = np.ones(peaks_size, dtype=np.uint8)  # Prepare array of flags
    
    #output_list(peaks, 'peaks')
    #output_list(priority, 'priority')
    #print('>>> distance:', distance)

    # Create map from `i` (index for `peaks` sorted by `priority`) to `j` (index
    # for `peaks` sorted by position). This allows to iterate `peaks` and `keep`
    # with `j` by order of `priority` while still maintaining the ability to
    # step to neighbouring peaks with (`j` + 1) or (`j` - 1).
    priority_to_position = np.argsort(priority,
        kind='stable'
        )
    
    #output_list(priority_to_position, 'priority_to_position')

    # Highest priority first -> iterate in reverse order (decreasing)
    for i in range(peaks_size - 1, -1, -1):
        # "Translate" `i` to `j` which points to current peak whose
        # neighbours are to be evaluated
        j = priority_to_position[i]
        if keep[j] == 0:
            # Skip evaluation for peak already marked as "don't keep"
            continue

        k = j - 1
        # Flag "earlier" peaks for removal until minimal distance is exceeded
        while 0 <= k and peaks[j] - peaks[k] < distance_:
            keep[k] = 0
            k -= 1

        k = j + 1
        # Flag "later" peaks for removal until minimal distance is exceeded
        while k < peaks_size and peaks[k] - peaks[j] < distance_:
            keep[k] = 0
            k += 1

    return keep.view(dtype=bool)  # Return as boolean array

def _local_maxima_1d(x):
    # Preallocate, there can't be more maxima than half the size of `x`
    midpoints = np.empty(x.shape[0] // 2, dtype=np.intp)
    left_edges = np.empty(x.shape[0] // 2, dtype=np.intp)
    right_edges = np.empty(x.shape[0] // 2, dtype=np.intp)
    m = 0  # Pointer to the end of valid area in allocated arrays

    i = 1  # Pointer to current sample, first one can't be maxima
    i_max = x.shape[0] - 1  # Last sample can't be maxima
    while i < i_max:
        # Test if previous sample is smaller
        if x[i - 1] < x[i]:
            i_ahead = i + 1  # Index to look ahead of current sample

            # Find next sample that is unequal to x[i]
            while i_ahead < i_max and x[i_ahead] == x[i]:
                i_ahead += 1

            # Maxima is found if next unequal sample is smaller than x[i]
            if x[i_ahead] < x[i]:
                left_edges[m] = i
                right_edges[m] = i_ahead - 1
                midpoints[m] = (left_edges[m] + right_edges[m]) // 2
                m += 1
                # Skip samples that can't be maximum
                i = i_ahead
        i += 1

    # Keep only valid part of array memory.
    midpoints.resize(m, refcheck=False)
    left_edges.resize(m, refcheck=False)
    right_edges.resize(m, refcheck=False)

    return midpoints, left_edges, right_edges


def peak_finding_sandbox():
    peaks = find_peaks(data_set_2, distance=4.0)
    exp_peaks = [7,15,25,34,40,44,48,53,58,62,68,73,77,82,86,92,96,101,108,118,124,132,137,143,148,153,158,163,167,174,181,187,197,203,207,214,220,228,232,236,241,245,249,253,258,264,271,275,280,287,294,302,306,312,318,325,331,338,342,349,357,363,369,374,378,383,388,393,397,403,409,414,419,427,434,445,450,456,463,472,477,486,491,500,508,513,518,523,527,534,543,551,559,563,569,576,581,586,590,594,599,606,611,615,619,625,634,640,645,650,655,662,667,672,677,681,688,696,701,706,710,715,719,728,734,738,744,748,752,757,762,766,772,777,784,789,796,801,806,812,818,822,828,833,837,841,847,854,858,863,870,875,882,886,891,897,903,909,916,921,925,932,936,940,949,955,960,964,968,974,981,986,990,998]
    exp_peaks = [7,15,25,34,40,44,48,53,58,62,68,73,79,84,92,96,101,108,118,124,132,137,143,148,153,158,163,167,174,181,187,197,203,207,214,220,228,232,236,241,245,249,253,258,264,271,275,280,285,289,294,302,306,312,318,325,331,338,345,349,357,363,369,374,378,383,390,397,403,409,414,419,427,434,445,450,456,463,472,477,486,491,500,508,513,518,523,527,534,543,551,559,563,569,576,581,586,590,594,599,606,611,615,619,625,634,640,645,650,655,662,667,672,677,681,688,696,701,706,710,715,719,728,734,738,744,748,752,757,762,766,772,777,784,789,796,801,806,812,818,822,828,833,837,841,847,854,858,863,870,875,882,886,891,897,903,909,916,921,928,932,936,940,949,955,960,964,968,974,981,986,990,998]
    
    print('')
    print('>>>     peaks:', peaks)
    print('>>> exp_peaks:', exp_peaks)
    for i in range(min(len(peaks), len(exp_peaks))):
        if peaks[i] != exp_peaks[i]:
            print(f'peaks[{i}] {peaks[i]} != {exp_peaks[i]} exp_peaks[{i}]')
    if np.array_equal(peaks, exp_peaks):
        print('Peaks and expected peaks equal')
    else:
        print('Peaks and expected peaks not equal')

#test_find_peaks = np.find_peaks
test_find_peaks = find_peaks

def tests():
    test1()
    test2()
    test3()
    test4()
    test5()
    test6()
    test7()
    test8()
    test9()
    test10()

    #sandbox()

data_set_1 = np.asarray([20,6,24,9,10,6,11,5,15,1,8,10,20,10,23,4,6,8,15,9,21,22,22,4,17,16,13,1,9,16,17,20,22,8,14,16,12,22,16,16,10,13,6,9,9,20,2,17,17,7,8,21,22,1,21,23,19,10,1,23,8,7,17,7,13,14,12,18,12,24,13,16,13,15,24,15,9,1,4,8,14,23,16,7,12,4,1,15,12,19,11,18,3,6,14,19,4,12,3,16])

data_set_2 = np.asarray([18,12,4,5,6,11,6,19,11,1,1,5,7,8,17,22,6,10,17,14,6,6,12,3,9,21,6,7,16,4,8,9,9,11,23,7,16,23,19,10,24,22,6,7,24,4,9,13,23,2,5,4,15,17,15,21,16,13,22,7,2,8,21,7,1,8,5,8,10,6,14,15,6,24,6,11,11,15,3,18,17,2,23,9,23,5,9,9,8,15,7,10,23,23,1,13,18,11,20,20,1,22,18,7,18,3,10,19,22,5,15,18,18,7,8,13,17,11,20,2,19,9,17,5,24,12,6,22,2,3,1,2,13,3,17,6,4,19,6,4,17,6,15,23,15,15,18,7,18,12,4,8,4,22,2,23,23,20,24,24,9,17,12,23,7,20,5,11,7,2,1,14,4,21,24,4,10,14,3,4,22,24,5,19,4,19,3,23,5,14,21,17,2,1,5,12,15,19,2,4,1,15,13,21,5,11,5,20,17,16,4,6,1,9,14,10,5,4,11,11,20,6,4,9,1,8,6,6,24,9,23,7,18,5,6,21,24,16,3,8,8,22,21,20,1,24,2,5,11,13,3,13,15,17,15,17,14,5,21,2,9,16,17,15,23,4,19,15,18,13,1,21,4,13,13,18,14,6,10,11,17,11,16,1,5,15,10,22,11,22,15,13,2,7,21,16,4,20,20,3,12,3,24,24,21,13,19,16,3,11,5,2,23,5,17,6,12,5,23,7,5,2,18,11,3,23,9,19,14,17,10,22,12,16,5,11,9,4,20,1,9,9,23,23,14,23,22,7,14,19,4,14,2,14,17,1,17,24,8,8,4,7,7,18,14,8,5,5,15,24,14,22,4,3,12,12,2,18,21,3,10,23,11,24,22,19,21,3,24,16,24,11,1,20,18,2,20,21,20,16,1,8,16,23,9,9,15,3,15,22,6,19,19,18,21,14,15,22,17,24,24,1,13,9,14,12,1,21,14,18,13,4,12,16,24,15,15,23,23,3,2,10,11,5,20,24,13,11,5,6,19,10,8,17,10,21,23,10,2,17,12,7,4,19,1,3,17,9,2,15,21,19,22,11,13,19,20,24,13,14,1,5,15,23,3,23,24,19,3,4,14,23,7,2,21,8,2,17,16,4,24,23,8,13,7,17,17,4,21,12,19,15,2,22,14,11,21,9,20,14,10,16,14,22,4,7,7,18,1,8,10,21,9,14,24,15,8,17,1,7,22,11,18,23,23,2,15,8,9,18,17,22,3,9,6,2,13,10,5,17,4,19,14,22,13,20,3,7,13,22,7,1,17,7,1,19,21,13,7,1,8,17,3,1,4,14,16,4,11,7,24,17,21,1,9,8,15,20,8,24,13,22,23,10,16,9,20,15,3,17,6,12,10,8,15,19,8,5,2,24,11,19,9,15,14,20,9,19,19,16,6,13,16,11,21,21,1,2,3,14,24,12,6,14,10,19,5,1,7,4,9,4,1,3,8,15,7,11,14,7,4,3,14,12,9,8,15,17,1,6,12,16,22,12,8,1,9,23,11,12,9,17,14,7,8,20,4,5,21,10,8,17,9,4,1,10,19,2,4,6,7,20,8,22,14,14,24,11,11,10,19,16,4,16,2,24,19,2,7,21,20,6,16,7,2,16,9,6,21,2,1,6,12,4,21,14,11,8,14,2,3,18,4,1,19,7,6,9,22,12,17,6,23,19,14,20,6,20,19,7,18,4,17,12,1,6,19,8,1,13,5,5,13,3,13,8,9,14,4,4,2,16,11,21,22,10,15,13,16,20,15,6,19,1,7,17,22,21,4,8,4,14,1,18,17,12,23,18,7,17,3,17,22,18,1,5,11,12,19,16,15,16,19,3,9,14,14,10,21,13,5,10,6,21,9,4,16,20,11,18,20,22,11,10,6,22,21,24,8,2,17,8,1,7,20,19,4,21,22,13,20,3,13,17,16,1,14,16,17,20,23,1,15,14,4,22,11,13,21,14,21,11,23,18,19,13,23,2,1,20,20,24,19,10,19,5,2,23,21,22,19,4,16,24,12,1,8,17,17,20,5,10,7,12,20,20,24,5,12,11,17,19,3,15,12,19,14,4,19,4,15,19,23,23,4,8,10,4,12,8,21,2,14,16,9,10,18,8,8,24,11,11,2,11,9,18,13,4,9,1,20,1,14,18,24,13,6,11,24,12,1,17,9,6,21,11,11,6,19,1,18,24,5,19,2,15,19,11,10,16,22,11,15,11,6,19,22,5,24,20])

def test1():
    x = np.asarray([1, 1, 2, 1, 1, 2, 1, 1], dtype=np.float32)
    peaks, props = test_find_peaks(x)
    print('test1:')
    output_vals_and_peaks(x, peaks)

def test2():
    x = np.asarray([1,2,4,2,1])
    peaks, props = test_find_peaks(x)
    print('test2:')
    output_vals_and_peaks(x, peaks)

def test3():
    x = data_set_1
    peaks, props = test_find_peaks(x)
    print('test3:')
    output_vals_and_peaks(x, peaks)

def test4():
    x = data_set_1
    peaks, props = test_find_peaks(x, distance=4)
    print('test4:')
    output_vals_and_peaks(x, peaks)

def test5():
    x = data_set_1
    peaks, props = test_find_peaks(x, height=22)
    print('test5:')
    output_vals_and_peaks(x, peaks)

def test6():
    x = data_set_1
    peaks, props = test_find_peaks(x, distance=4, height=22)
    print('test6:')
    output_vals_and_peaks(x, peaks)

def test7():
    x = data_set_2
    peaks, props = test_find_peaks(x)
    print('test7:')
    output_vals_and_peaks(x, peaks)

def test8():
    x = data_set_2
    peaks, props = test_find_peaks(x, distance=4)
    print('test8:')
    output_vals_and_peaks(x, peaks)

def test9():
    x = data_set_2
    peaks, props = test_find_peaks(x, height=22)
    print('test9:')
    output_vals_and_peaks(x, peaks)

def test10():
    x = data_set_2
    peaks, props = test_find_peaks(x, distance=4, height=22)
    print('test10:')
    output_vals_and_peaks(x, peaks)
    

def sandbox():
    x = np.random.randint(1, 25, size=1000)
    peaks, params = sp.signal.find_peaks(x)
    print(f'x:        {",".join([str(a) for a in x])}')
    print(f'peaks:    {peaks}')
    print(f'x[peaks]: {x[peaks]}')

def output_vals_and_peaks(x, peaks):
    output_list('       x', x)
    output_list('   peaks', peaks)
    output_list('x[peaks]', x[peaks])
    print('')

def output_list(name, lst):
    s = ','.join([str(l) for l in lst])
    print(f'{name}: {len(lst)}, {s}')

'''
test1:
       x: 8, 1.0,1.0,2.0,1.0,1.0,2.0,1.0,1.0
   peaks: 2, 2,5
x[peaks]: 2, 2.0,2.0

test2:
       x: 5, 1,2,4,2,1
   peaks: 1, 2
x[peaks]: 1, 4

test3:
       x: 100, 20,6,24,9,10,6,11,5,15,1,8,10,20,10,23,4,6,8,15,9,21,22,22,4,17,16,13,1,9,16,17,20,22,8,14,16,12,22,16,16,10,13,6,9,9,20,2,17,17,7,8,21,22,1,21,23,19,10,1,23,8,7,17,7,13,14,12,18,12,24,13,16,13,15,24,15,9,1,4,8,14,23,16,7,12,4,1,15,12,19,11,18,3,6,14,19,4,12,3,16
   peaks: 31, 2,4,6,8,12,14,18,21,24,32,35,37,41,45,47,52,55,59,62,65,67,69,71,74,81,84,87,89,91,95,97
x[peaks]: 31, 24,10,11,15,20,23,15,22,17,22,16,22,13,20,17,22,23,23,17,14,18,24,16,24,23,12,15,19,18,19,12

test4:
       x: 100, 20,6,24,9,10,6,11,5,15,1,8,10,20,10,23,4,6,8,15,9,21,22,22,4,17,16,13,1,9,16,17,20,22,8,14,16,12,22,16,16,10,13,6,9,9,20,2,17,17,7,8,21,22,1,21,23,19,10,1,23,8,7,17,7,13,14,12,18,12,24,13,16,13,15,24,15,9,1,4,8,14,23,16,7,12,4,1,15,12,19,11,18,3,6,14,19,4,12,3,16
   peaks: 16, 2,8,14,21,32,37,41,45,55,59,65,69,74,81,89,95
x[peaks]: 16, 24,15,23,22,22,22,13,20,23,23,14,24,24,23,19,19

test5:
       x: 100, 20,6,24,9,10,6,11,5,15,1,8,10,20,10,23,4,6,8,15,9,21,22,22,4,17,16,13,1,9,16,17,20,22,8,14,16,12,22,16,16,10,13,6,9,9,20,2,17,17,7,8,21,22,1,21,23,19,10,1,23,8,7,17,7,13,14,12,18,12,24,13,16,13,15,24,15,9,1,4,8,14,23,16,7,12,4,1,15,12,19,11,18,3,6,14,19,4,12,3,16
   peaks: 31, 2,4,6,8,12,14,18,21,24,32,35,37,41,45,47,52,55,59,62,65,67,69,71,74,81,84,87,89,91,95,97
x[peaks]: 31, 24,10,11,15,20,23,15,22,17,22,16,22,13,20,17,22,23,23,17,14,18,24,16,24,23,12,15,19,18,19,12

test6:
       x: 100, 20,6,24,9,10,6,11,5,15,1,8,10,20,10,23,4,6,8,15,9,21,22,22,4,17,16,13,1,9,16,17,20,22,8,14,16,12,22,16,16,10,13,6,9,9,20,2,17,17,7,8,21,22,1,21,23,19,10,1,23,8,7,17,7,13,14,12,18,12,24,13,16,13,15,24,15,9,1,4,8,14,23,16,7,12,4,1,15,12,19,11,18,3,6,14,19,4,12,3,16
   peaks: 16, 2,8,14,21,32,37,41,45,55,59,65,69,74,81,89,95
x[peaks]: 16, 24,15,23,22,22,22,13,20,23,23,14,24,24,23,19,19

test7:
       x: 1000, 18,12,4,5,6,11,6,19,11,1,1,5,7,8,17,22,6,10,17,14,6,6,12,3,9,21,6,7,16,4,8,9,9,11,23,7,16,23,19,10,24,22,6,7,24,4,9,13,23,2,5,4,15,17,15,21,16,13,22,7,2,8,21,7,1,8,5,8,10,6,14,15,6,24,6,11,11,15,3,18,17,2,23,9,23,5,9,9,8,15,7,10,23,23,1,13,18,11,20,20,1,22,18,7,18,3,10,19,22,5,15,18,18,7,8,13,17,11,20,2,19,9,17,5,24,12,6,22,2,3,1,2,13,3,17,6,4,19,6,4,17,6,15,23,15,15,18,7,18,12,4,8,4,22,2,23,23,20,24,24,9,17,12,23,7,20,5,11,7,2,1,14,4,21,24,4,10,14,3,4,22,24,5,19,4,19,3,23,5,14,21,17,2,1,5,12,15,19,2,4,1,15,13,21,5,11,5,20,17,16,4,6,1,9,14,10,5,4,11,11,20,6,4,9,1,8,6,6,24,9,23,7,18,5,6,21,24,16,3,8,8,22,21,20,1,24,2,5,11,13,3,13,15,17,15,17,14,5,21,2,9,16,17,15,23,4,19,15,18,13,1,21,4,13,13,18,14,6,10,11,17,11,16,1,5,15,10,22,11,22,15,13,2,7,21,16,4,20,20,3,12,3,24,24,21,13,19,16,3,11,5,2,23,5,17,6,12,5,23,7,5,2,18,11,3,23,9,19,14,17,10,22,12,16,5,11,9,4,20,1,9,9,23,23,14,23,22,7,14,19,4,14,2,14,17,1,17,24,8,8,4,7,7,18,14,8,5,5,15,24,14,22,4,3,12,12,2,18,21,3,10,23,11,24,22,19,21,3,24,16,24,11,1,20,18,2,20,21,20,16,1,8,16,23,9,9,15,3,15,22,6,19,19,18,21,14,15,22,17,24,24,1,13,9,14,12,1,21,14,18,13,4,12,16,24,15,15,23,23,3,2,10,11,5,20,24,13,11,5,6,19,10,8,17,10,21,23,10,2,17,12,7,4,19,1,3,17,9,2,15,21,19,22,11,13,19,20,24,13,14,1,5,15,23,3,23,24,19,3,4,14,23,7,2,21,8,2,17,16,4,24,23,8,13,7,17,17,4,21,12,19,15,2,22,14,11,21,9,20,14,10,16,14,22,4,7,7,18,1,8,10,21,9,14,24,15,8,17,1,7,22,11,18,23,23,2,15,8,9,18,17,22,3,9,6,2,13,10,5,17,4,19,14,22,13,20,3,7,13,22,7,1,17,7,1,19,21,13,7,1,8,17,3,1,4,14,16,4,11,7,24,17,21,1,9,8,15,20,8,24,13,22,23,10,16,9,20,15,3,17,6,12,10,8,15,19,8,5,2,24,11,19,9,15,14,20,9,19,19,16,6,13,16,11,21,21,1,2,3,14,24,12,6,14,10,19,5,1,7,4,9,4,1,3,8,15,7,11,14,7,4,3,14,12,9,8,15,17,1,6,12,16,22,12,8,1,9,23,11,12,9,17,14,7,8,20,4,5,21,10,8,17,9,4,1,10,19,2,4,6,7,20,8,22,14,14,24,11,11,10,19,16,4,16,2,24,19,2,7,21,20,6,16,7,2,16,9,6,21,2,1,6,12,4,21,14,11,8,14,2,3,18,4,1,19,7,6,9,22,12,17,6,23,19,14,20,6,20,19,7,18,4,17,12,1,6,19,8,1,13,5,5,13,3,13,8,9,14,4,4,2,16,11,21,22,10,15,13,16,20,15,6,19,1,7,17,22,21,4,8,4,14,1,18,17,12,23,18,7,17,3,17,22,18,1,5,11,12,19,16,15,16,19,3,9,14,14,10,21,13,5,10,6,21,9,4,16,20,11,18,20,22,11,10,6,22,21,24,8,2,17,8,1,7,20,19,4,21,22,13,20,3,13,17,16,1,14,16,17,20,23,1,15,14,4,22,11,13,21,14,21,11,23,18,19,13,23,2,1,20,20,24,19,10,19,5,2,23,21,22,19,4,16,24,12,1,8,17,17,20,5,10,7,12,20,20,24,5,12,11,17,19,3,15,12,19,14,4,19,4,15,19,23,23,4,8,10,4,12,8,21,2,14,16,9,10,18,8,8,24,11,11,2,11,9,18,13,4,9,1,20,1,14,18,24,13,6,11,24,12,1,17,9,6,21,11,11,6,19,1,18,24,5,19,2,15,19,11,10,16,22,11,15,11,6,19,22,5,24,20
   peaks: 326, 5,7,15,18,22,25,28,34,37,40,44,48,50,53,55,58,62,65,68,71,73,77,79,82,84,86,89,92,96,98,101,104,108,111,116,118,120,122,124,127,129,132,134,137,140,143,146,148,151,153,155,158,161,163,165,167,171,174,177,181,183,185,187,190,197,199,201,203,205,207,211,214,220,223,225,228,230,232,236,241,245,249,253,255,258,262,264,266,268,271,275,280,282,285,287,289,294,297,300,302,306,309,312,314,316,318,322,325,327,329,331,333,335,338,342,345,349,351,354,357,363,369,371,374,378,381,383,386,388,390,393,397,403,406,409,411,414,417,419,422,424,427,429,434,437,442,445,450,453,456,459,463,466,470,472,477,479,483,486,491,494,497,500,503,505,508,510,513,516,518,521,523,527,531,534,537,540,543,546,549,551,553,556,559,561,563,565,569,572,576,581,586,588,590,592,594,597,599,602,604,606,609,611,615,619,621,623,625,627,632,634,640,643,645,648,650,655,658,662,667,672,677,679,681,685,688,691,696,701,703,706,710,713,715,719,722,725,728,732,734,738,741,744,748,750,752,755,757,760,762,766,769,772,774,777,781,784,786,789,792,796,799,801,803,806,809,812,818,822,825,828,831,833,837,841,845,847,850,854,858,860,863,870,872,875,878,880,882,884,886,891,894,897,899,903,909,911,916,918,921,923,925,928,932,936,938,940,943,946,949,953,955,958,960,964,968,971,974,978,981,983,986,990,992,996,998
x[peaks]: 326, 11,19,22,17,12,21,16,23,23,24,24,23,5,17,21,22,21,8,10,15,24,15,18,23,23,9,15,23,18,20,22,18,22,18,17,20,19,17,24,22,3,13,17,19,17,23,18,18,8,22,23,24,17,23,20,11,14,24,14,24,19,19,23,21,19,4,15,21,11,20,6,14,20,9,8,24,23,18,24,22,24,13,17,17,21,17,23,19,18,21,18,17,16,15,22,22,21,20,12,24,19,11,23,17,12,23,18,23,19,17,22,16,11,20,23,23,19,14,17,24,18,24,22,12,21,23,24,21,24,24,20,21,23,15,22,19,21,22,24,13,14,21,18,24,23,11,24,19,17,23,17,19,17,21,22,24,14,23,24,23,21,17,24,13,17,21,19,22,21,20,16,22,18,21,24,17,22,23,15,18,22,9,13,17,19,22,20,22,17,21,17,16,11,24,21,9,20,24,23,16,20,17,12,19,24,19,15,20,19,16,21,24,14,19,7,9,15,14,14,17,22,23,12,17,20,21,17,19,20,22,24,19,16,24,21,16,16,21,12,21,14,18,19,22,17,23,20,20,18,17,19,13,13,13,14,16,22,15,20,19,22,8,14,18,23,17,22,19,19,14,21,10,21,20,22,22,24,17,20,22,20,17,23,15,22,21,21,23,19,23,24,19,23,22,24,20,10,24,12,19,15,19,19,23,10,12,21,16,18,24,11,18,9,20,24,24,17,21,19,24,19,19,22,15,22,24

test8:
       x: 1000, 18,12,4,5,6,11,6,19,11,1,1,5,7,8,17,22,6,10,17,14,6,6,12,3,9,21,6,7,16,4,8,9,9,11,23,7,16,23,19,10,24,22,6,7,24,4,9,13,23,2,5,4,15,17,15,21,16,13,22,7,2,8,21,7,1,8,5,8,10,6,14,15,6,24,6,11,11,15,3,18,17,2,23,9,23,5,9,9,8,15,7,10,23,23,1,13,18,11,20,20,1,22,18,7,18,3,10,19,22,5,15,18,18,7,8,13,17,11,20,2,19,9,17,5,24,12,6,22,2,3,1,2,13,3,17,6,4,19,6,4,17,6,15,23,15,15,18,7,18,12,4,8,4,22,2,23,23,20,24,24,9,17,12,23,7,20,5,11,7,2,1,14,4,21,24,4,10,14,3,4,22,24,5,19,4,19,3,23,5,14,21,17,2,1,5,12,15,19,2,4,1,15,13,21,5,11,5,20,17,16,4,6,1,9,14,10,5,4,11,11,20,6,4,9,1,8,6,6,24,9,23,7,18,5,6,21,24,16,3,8,8,22,21,20,1,24,2,5,11,13,3,13,15,17,15,17,14,5,21,2,9,16,17,15,23,4,19,15,18,13,1,21,4,13,13,18,14,6,10,11,17,11,16,1,5,15,10,22,11,22,15,13,2,7,21,16,4,20,20,3,12,3,24,24,21,13,19,16,3,11,5,2,23,5,17,6,12,5,23,7,5,2,18,11,3,23,9,19,14,17,10,22,12,16,5,11,9,4,20,1,9,9,23,23,14,23,22,7,14,19,4,14,2,14,17,1,17,24,8,8,4,7,7,18,14,8,5,5,15,24,14,22,4,3,12,12,2,18,21,3,10,23,11,24,22,19,21,3,24,16,24,11,1,20,18,2,20,21,20,16,1,8,16,23,9,9,15,3,15,22,6,19,19,18,21,14,15,22,17,24,24,1,13,9,14,12,1,21,14,18,13,4,12,16,24,15,15,23,23,3,2,10,11,5,20,24,13,11,5,6,19,10,8,17,10,21,23,10,2,17,12,7,4,19,1,3,17,9,2,15,21,19,22,11,13,19,20,24,13,14,1,5,15,23,3,23,24,19,3,4,14,23,7,2,21,8,2,17,16,4,24,23,8,13,7,17,17,4,21,12,19,15,2,22,14,11,21,9,20,14,10,16,14,22,4,7,7,18,1,8,10,21,9,14,24,15,8,17,1,7,22,11,18,23,23,2,15,8,9,18,17,22,3,9,6,2,13,10,5,17,4,19,14,22,13,20,3,7,13,22,7,1,17,7,1,19,21,13,7,1,8,17,3,1,4,14,16,4,11,7,24,17,21,1,9,8,15,20,8,24,13,22,23,10,16,9,20,15,3,17,6,12,10,8,15,19,8,5,2,24,11,19,9,15,14,20,9,19,19,16,6,13,16,11,21,21,1,2,3,14,24,12,6,14,10,19,5,1,7,4,9,4,1,3,8,15,7,11,14,7,4,3,14,12,9,8,15,17,1,6,12,16,22,12,8,1,9,23,11,12,9,17,14,7,8,20,4,5,21,10,8,17,9,4,1,10,19,2,4,6,7,20,8,22,14,14,24,11,11,10,19,16,4,16,2,24,19,2,7,21,20,6,16,7,2,16,9,6,21,2,1,6,12,4,21,14,11,8,14,2,3,18,4,1,19,7,6,9,22,12,17,6,23,19,14,20,6,20,19,7,18,4,17,12,1,6,19,8,1,13,5,5,13,3,13,8,9,14,4,4,2,16,11,21,22,10,15,13,16,20,15,6,19,1,7,17,22,21,4,8,4,14,1,18,17,12,23,18,7,17,3,17,22,18,1,5,11,12,19,16,15,16,19,3,9,14,14,10,21,13,5,10,6,21,9,4,16,20,11,18,20,22,11,10,6,22,21,24,8,2,17,8,1,7,20,19,4,21,22,13,20,3,13,17,16,1,14,16,17,20,23,1,15,14,4,22,11,13,21,14,21,11,23,18,19,13,23,2,1,20,20,24,19,10,19,5,2,23,21,22,19,4,16,24,12,1,8,17,17,20,5,10,7,12,20,20,24,5,12,11,17,19,3,15,12,19,14,4,19,4,15,19,23,23,4,8,10,4,12,8,21,2,14,16,9,10,18,8,8,24,11,11,2,11,9,18,13,4,9,1,20,1,14,18,24,13,6,11,24,12,1,17,9,6,21,11,11,6,19,1,18,24,5,19,2,15,19,11,10,16,22,11,15,11,6,19,22,5,24,20
   peaks: 173, 7,15,25,34,40,44,48,53,58,62,68,73,79,84,92,96,101,108,118,124,132,137,143,148,153,158,163,167,174,181,187,197,203,207,214,220,228,232,236,241,245,249,253,258,264,271,275,280,285,289,294,302,306,312,318,325,331,338,345,349,357,363,369,374,378,383,390,397,403,409,414,419,427,434,445,450,456,463,472,477,486,491,500,508,513,518,523,527,534,543,551,559,563,569,576,581,586,590,594,599,606,611,615,619,625,634,640,645,650,655,662,667,672,677,681,688,696,701,706,710,715,719,728,734,738,744,748,752,757,762,766,772,777,784,789,796,801,806,812,818,822,828,833,837,841,847,854,858,863,870,875,882,886,891,897,903,909,916,921,928,932,936,940,949,955,960,964,968,974,981,986,990,998
x[peaks]: 173, 19,22,21,23,24,24,23,17,22,21,10,24,18,23,23,18,22,22,20,24,13,19,23,18,22,24,23,11,24,24,23,19,21,20,14,20,24,18,24,22,24,13,17,21,23,21,18,17,15,22,21,24,19,23,23,23,22,20,23,19,24,18,24,12,21,24,24,21,23,22,21,24,21,24,24,19,23,19,22,24,24,23,24,21,22,20,22,18,24,23,22,17,22,22,21,17,16,24,9,24,20,12,19,24,20,21,24,19,9,15,14,17,22,23,17,21,19,20,24,19,24,21,21,21,14,19,22,23,20,17,19,13,14,22,20,22,14,23,22,19,19,21,21,20,22,24,20,22,17,23,22,23,23,24,23,24,20,24,19,19,23,10,21,24,18,20,24,24,21,24,19,22,24

test9:
       x: 1000, 18,12,4,5,6,11,6,19,11,1,1,5,7,8,17,22,6,10,17,14,6,6,12,3,9,21,6,7,16,4,8,9,9,11,23,7,16,23,19,10,24,22,6,7,24,4,9,13,23,2,5,4,15,17,15,21,16,13,22,7,2,8,21,7,1,8,5,8,10,6,14,15,6,24,6,11,11,15,3,18,17,2,23,9,23,5,9,9,8,15,7,10,23,23,1,13,18,11,20,20,1,22,18,7,18,3,10,19,22,5,15,18,18,7,8,13,17,11,20,2,19,9,17,5,24,12,6,22,2,3,1,2,13,3,17,6,4,19,6,4,17,6,15,23,15,15,18,7,18,12,4,8,4,22,2,23,23,20,24,24,9,17,12,23,7,20,5,11,7,2,1,14,4,21,24,4,10,14,3,4,22,24,5,19,4,19,3,23,5,14,21,17,2,1,5,12,15,19,2,4,1,15,13,21,5,11,5,20,17,16,4,6,1,9,14,10,5,4,11,11,20,6,4,9,1,8,6,6,24,9,23,7,18,5,6,21,24,16,3,8,8,22,21,20,1,24,2,5,11,13,3,13,15,17,15,17,14,5,21,2,9,16,17,15,23,4,19,15,18,13,1,21,4,13,13,18,14,6,10,11,17,11,16,1,5,15,10,22,11,22,15,13,2,7,21,16,4,20,20,3,12,3,24,24,21,13,19,16,3,11,5,2,23,5,17,6,12,5,23,7,5,2,18,11,3,23,9,19,14,17,10,22,12,16,5,11,9,4,20,1,9,9,23,23,14,23,22,7,14,19,4,14,2,14,17,1,17,24,8,8,4,7,7,18,14,8,5,5,15,24,14,22,4,3,12,12,2,18,21,3,10,23,11,24,22,19,21,3,24,16,24,11,1,20,18,2,20,21,20,16,1,8,16,23,9,9,15,3,15,22,6,19,19,18,21,14,15,22,17,24,24,1,13,9,14,12,1,21,14,18,13,4,12,16,24,15,15,23,23,3,2,10,11,5,20,24,13,11,5,6,19,10,8,17,10,21,23,10,2,17,12,7,4,19,1,3,17,9,2,15,21,19,22,11,13,19,20,24,13,14,1,5,15,23,3,23,24,19,3,4,14,23,7,2,21,8,2,17,16,4,24,23,8,13,7,17,17,4,21,12,19,15,2,22,14,11,21,9,20,14,10,16,14,22,4,7,7,18,1,8,10,21,9,14,24,15,8,17,1,7,22,11,18,23,23,2,15,8,9,18,17,22,3,9,6,2,13,10,5,17,4,19,14,22,13,20,3,7,13,22,7,1,17,7,1,19,21,13,7,1,8,17,3,1,4,14,16,4,11,7,24,17,21,1,9,8,15,20,8,24,13,22,23,10,16,9,20,15,3,17,6,12,10,8,15,19,8,5,2,24,11,19,9,15,14,20,9,19,19,16,6,13,16,11,21,21,1,2,3,14,24,12,6,14,10,19,5,1,7,4,9,4,1,3,8,15,7,11,14,7,4,3,14,12,9,8,15,17,1,6,12,16,22,12,8,1,9,23,11,12,9,17,14,7,8,20,4,5,21,10,8,17,9,4,1,10,19,2,4,6,7,20,8,22,14,14,24,11,11,10,19,16,4,16,2,24,19,2,7,21,20,6,16,7,2,16,9,6,21,2,1,6,12,4,21,14,11,8,14,2,3,18,4,1,19,7,6,9,22,12,17,6,23,19,14,20,6,20,19,7,18,4,17,12,1,6,19,8,1,13,5,5,13,3,13,8,9,14,4,4,2,16,11,21,22,10,15,13,16,20,15,6,19,1,7,17,22,21,4,8,4,14,1,18,17,12,23,18,7,17,3,17,22,18,1,5,11,12,19,16,15,16,19,3,9,14,14,10,21,13,5,10,6,21,9,4,16,20,11,18,20,22,11,10,6,22,21,24,8,2,17,8,1,7,20,19,4,21,22,13,20,3,13,17,16,1,14,16,17,20,23,1,15,14,4,22,11,13,21,14,21,11,23,18,19,13,23,2,1,20,20,24,19,10,19,5,2,23,21,22,19,4,16,24,12,1,8,17,17,20,5,10,7,12,20,20,24,5,12,11,17,19,3,15,12,19,14,4,19,4,15,19,23,23,4,8,10,4,12,8,21,2,14,16,9,10,18,8,8,24,11,11,2,11,9,18,13,4,9,1,20,1,14,18,24,13,6,11,24,12,1,17,9,6,21,11,11,6,19,1,18,24,5,19,2,15,19,11,10,16,22,11,15,11,6,19,22,5,24,20
   peaks: 326, 5,7,15,18,22,25,28,34,37,40,44,48,50,53,55,58,62,65,68,71,73,77,79,82,84,86,89,92,96,98,101,104,108,111,116,118,120,122,124,127,129,132,134,137,140,143,146,148,151,153,155,158,161,163,165,167,171,174,177,181,183,185,187,190,197,199,201,203,205,207,211,214,220,223,225,228,230,232,236,241,245,249,253,255,258,262,264,266,268,271,275,280,282,285,287,289,294,297,300,302,306,309,312,314,316,318,322,325,327,329,331,333,335,338,342,345,349,351,354,357,363,369,371,374,378,381,383,386,388,390,393,397,403,406,409,411,414,417,419,422,424,427,429,434,437,442,445,450,453,456,459,463,466,470,472,477,479,483,486,491,494,497,500,503,505,508,510,513,516,518,521,523,527,531,534,537,540,543,546,549,551,553,556,559,561,563,565,569,572,576,581,586,588,590,592,594,597,599,602,604,606,609,611,615,619,621,623,625,627,632,634,640,643,645,648,650,655,658,662,667,672,677,679,681,685,688,691,696,701,703,706,710,713,715,719,722,725,728,732,734,738,741,744,748,750,752,755,757,760,762,766,769,772,774,777,781,784,786,789,792,796,799,801,803,806,809,812,818,822,825,828,831,833,837,841,845,847,850,854,858,860,863,870,872,875,878,880,882,884,886,891,894,897,899,903,909,911,916,918,921,923,925,928,932,936,938,940,943,946,949,953,955,958,960,964,968,971,974,978,981,983,986,990,992,996,998
x[peaks]: 326, 11,19,22,17,12,21,16,23,23,24,24,23,5,17,21,22,21,8,10,15,24,15,18,23,23,9,15,23,18,20,22,18,22,18,17,20,19,17,24,22,3,13,17,19,17,23,18,18,8,22,23,24,17,23,20,11,14,24,14,24,19,19,23,21,19,4,15,21,11,20,6,14,20,9,8,24,23,18,24,22,24,13,17,17,21,17,23,19,18,21,18,17,16,15,22,22,21,20,12,24,19,11,23,17,12,23,18,23,19,17,22,16,11,20,23,23,19,14,17,24,18,24,22,12,21,23,24,21,24,24,20,21,23,15,22,19,21,22,24,13,14,21,18,24,23,11,24,19,17,23,17,19,17,21,22,24,14,23,24,23,21,17,24,13,17,21,19,22,21,20,16,22,18,21,24,17,22,23,15,18,22,9,13,17,19,22,20,22,17,21,17,16,11,24,21,9,20,24,23,16,20,17,12,19,24,19,15,20,19,16,21,24,14,19,7,9,15,14,14,17,22,23,12,17,20,21,17,19,20,22,24,19,16,24,21,16,16,21,12,21,14,18,19,22,17,23,20,20,18,17,19,13,13,13,14,16,22,15,20,19,22,8,14,18,23,17,22,19,19,14,21,10,21,20,22,22,24,17,20,22,20,17,23,15,22,21,21,23,19,23,24,19,23,22,24,20,10,24,12,19,15,19,19,23,10,12,21,16,18,24,11,18,9,20,24,24,17,21,19,24,19,19,22,15,22,24

test10:
       x: 1000, 18,12,4,5,6,11,6,19,11,1,1,5,7,8,17,22,6,10,17,14,6,6,12,3,9,21,6,7,16,4,8,9,9,11,23,7,16,23,19,10,24,22,6,7,24,4,9,13,23,2,5,4,15,17,15,21,16,13,22,7,2,8,21,7,1,8,5,8,10,6,14,15,6,24,6,11,11,15,3,18,17,2,23,9,23,5,9,9,8,15,7,10,23,23,1,13,18,11,20,20,1,22,18,7,18,3,10,19,22,5,15,18,18,7,8,13,17,11,20,2,19,9,17,5,24,12,6,22,2,3,1,2,13,3,17,6,4,19,6,4,17,6,15,23,15,15,18,7,18,12,4,8,4,22,2,23,23,20,24,24,9,17,12,23,7,20,5,11,7,2,1,14,4,21,24,4,10,14,3,4,22,24,5,19,4,19,3,23,5,14,21,17,2,1,5,12,15,19,2,4,1,15,13,21,5,11,5,20,17,16,4,6,1,9,14,10,5,4,11,11,20,6,4,9,1,8,6,6,24,9,23,7,18,5,6,21,24,16,3,8,8,22,21,20,1,24,2,5,11,13,3,13,15,17,15,17,14,5,21,2,9,16,17,15,23,4,19,15,18,13,1,21,4,13,13,18,14,6,10,11,17,11,16,1,5,15,10,22,11,22,15,13,2,7,21,16,4,20,20,3,12,3,24,24,21,13,19,16,3,11,5,2,23,5,17,6,12,5,23,7,5,2,18,11,3,23,9,19,14,17,10,22,12,16,5,11,9,4,20,1,9,9,23,23,14,23,22,7,14,19,4,14,2,14,17,1,17,24,8,8,4,7,7,18,14,8,5,5,15,24,14,22,4,3,12,12,2,18,21,3,10,23,11,24,22,19,21,3,24,16,24,11,1,20,18,2,20,21,20,16,1,8,16,23,9,9,15,3,15,22,6,19,19,18,21,14,15,22,17,24,24,1,13,9,14,12,1,21,14,18,13,4,12,16,24,15,15,23,23,3,2,10,11,5,20,24,13,11,5,6,19,10,8,17,10,21,23,10,2,17,12,7,4,19,1,3,17,9,2,15,21,19,22,11,13,19,20,24,13,14,1,5,15,23,3,23,24,19,3,4,14,23,7,2,21,8,2,17,16,4,24,23,8,13,7,17,17,4,21,12,19,15,2,22,14,11,21,9,20,14,10,16,14,22,4,7,7,18,1,8,10,21,9,14,24,15,8,17,1,7,22,11,18,23,23,2,15,8,9,18,17,22,3,9,6,2,13,10,5,17,4,19,14,22,13,20,3,7,13,22,7,1,17,7,1,19,21,13,7,1,8,17,3,1,4,14,16,4,11,7,24,17,21,1,9,8,15,20,8,24,13,22,23,10,16,9,20,15,3,17,6,12,10,8,15,19,8,5,2,24,11,19,9,15,14,20,9,19,19,16,6,13,16,11,21,21,1,2,3,14,24,12,6,14,10,19,5,1,7,4,9,4,1,3,8,15,7,11,14,7,4,3,14,12,9,8,15,17,1,6,12,16,22,12,8,1,9,23,11,12,9,17,14,7,8,20,4,5,21,10,8,17,9,4,1,10,19,2,4,6,7,20,8,22,14,14,24,11,11,10,19,16,4,16,2,24,19,2,7,21,20,6,16,7,2,16,9,6,21,2,1,6,12,4,21,14,11,8,14,2,3,18,4,1,19,7,6,9,22,12,17,6,23,19,14,20,6,20,19,7,18,4,17,12,1,6,19,8,1,13,5,5,13,3,13,8,9,14,4,4,2,16,11,21,22,10,15,13,16,20,15,6,19,1,7,17,22,21,4,8,4,14,1,18,17,12,23,18,7,17,3,17,22,18,1,5,11,12,19,16,15,16,19,3,9,14,14,10,21,13,5,10,6,21,9,4,16,20,11,18,20,22,11,10,6,22,21,24,8,2,17,8,1,7,20,19,4,21,22,13,20,3,13,17,16,1,14,16,17,20,23,1,15,14,4,22,11,13,21,14,21,11,23,18,19,13,23,2,1,20,20,24,19,10,19,5,2,23,21,22,19,4,16,24,12,1,8,17,17,20,5,10,7,12,20,20,24,5,12,11,17,19,3,15,12,19,14,4,19,4,15,19,23,23,4,8,10,4,12,8,21,2,14,16,9,10,18,8,8,24,11,11,2,11,9,18,13,4,9,1,20,1,14,18,24,13,6,11,24,12,1,17,9,6,21,11,11,6,19,1,18,24,5,19,2,15,19,11,10,16,22,11,15,11,6,19,22,5,24,20
   peaks: 173, 7,15,25,34,40,44,48,53,58,62,68,73,79,84,92,96,101,108,118,124,132,137,143,148,153,158,163,167,174,181,187,197,203,207,214,220,228,232,236,241,245,249,253,258,264,271,275,280,285,289,294,302,306,312,318,325,331,338,345,349,357,363,369,374,378,383,390,397,403,409,414,419,427,434,445,450,456,463,472,477,486,491,500,508,513,518,523,527,534,543,551,559,563,569,576,581,586,590,594,599,606,611,615,619,625,634,640,645,650,655,662,667,672,677,681,688,696,701,706,710,715,719,728,734,738,744,748,752,757,762,766,772,777,784,789,796,801,806,812,818,822,828,833,837,841,847,854,858,863,870,875,882,886,891,897,903,909,916,921,928,932,936,940,949,955,960,964,968,974,981,986,990,998
x[peaks]: 173, 19,22,21,23,24,24,23,17,22,21,10,24,18,23,23,18,22,22,20,24,13,19,23,18,22,24,23,11,24,24,23,19,21,20,14,20,24,18,24,22,24,13,17,21,23,21,18,17,15,22,21,24,19,23,23,23,22,20,23,19,24,18,24,12,21,24,24,21,23,22,21,24,21,24,24,19,23,19,22,24,24,23,24,21,22,20,22,18,24,23,22,17,22,22,21,17,16,24,9,24,20,12,19,24,20,21,24,19,9,15,14,17,22,23,17,21,19,20,24,19,24,21,21,21,14,19,22,23,20,17,19,13,14,22,20,22,14,23,22,19,19,21,21,20,22,24,20,22,17,23,22,23,23,24,23,24,20,24,19,19,23,10,21,24,18,20,24,24,21,24,19,22,24
'''

'''
sp.signal.find_peaks(yf, height=height)

peaks_with_peak_dist, _ = sp.signal.find_peaks(
    dy_coord_avg,
    distance=peak_dist,
    height=SIGNAL_STRENGTH_THRESHOLD)
'''

if __name__ == '__main__':
    main()
