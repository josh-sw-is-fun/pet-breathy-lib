#include "pet_breathy/peak_finding.hpp"

#include "gtest/gtest.h"

// ./libs/pet-breathy/test_petbreathy

std::vector<float> data_set_1{20, 6,  24, 9, 10, 6,  11, 5,  15, 1,  8,  10, 20, 10, 23, 4,  6,  8,  15, 9,
                              21, 22, 22, 4, 17, 16, 13, 1,  9,  16, 17, 20, 22, 8,  14, 16, 12, 22, 16, 16,
                              10, 13, 6,  9, 9,  20, 2,  17, 17, 7,  8,  21, 22, 1,  21, 23, 19, 10, 1,  23,
                              8,  7,  17, 7, 13, 14, 12, 18, 12, 24, 13, 16, 13, 15, 24, 15, 9,  1,  4,  8,
                              14, 23, 16, 7, 12, 4,  1,  15, 12, 19, 11, 18, 3,  6,  14, 19, 4,  12, 3,  16};

std::vector<float> data_set_2{
    18, 12, 4,  5,  6,  11, 6,  19, 11, 1,  1,  5,  7,  8,  17, 22, 6,  10, 17, 14, 6,  6,  12, 3,  9,  21, 6,
    7,  16, 4,  8,  9,  9,  11, 23, 7,  16, 23, 19, 10, 24, 22, 6,  7,  24, 4,  9,  13, 23, 2,  5,  4,  15, 17,
    15, 21, 16, 13, 22, 7,  2,  8,  21, 7,  1,  8,  5,  8,  10, 6,  14, 15, 6,  24, 6,  11, 11, 15, 3,  18, 17,
    2,  23, 9,  23, 5,  9,  9,  8,  15, 7,  10, 23, 23, 1,  13, 18, 11, 20, 20, 1,  22, 18, 7,  18, 3,  10, 19,
    22, 5,  15, 18, 18, 7,  8,  13, 17, 11, 20, 2,  19, 9,  17, 5,  24, 12, 6,  22, 2,  3,  1,  2,  13, 3,  17,
    6,  4,  19, 6,  4,  17, 6,  15, 23, 15, 15, 18, 7,  18, 12, 4,  8,  4,  22, 2,  23, 23, 20, 24, 24, 9,  17,
    12, 23, 7,  20, 5,  11, 7,  2,  1,  14, 4,  21, 24, 4,  10, 14, 3,  4,  22, 24, 5,  19, 4,  19, 3,  23, 5,
    14, 21, 17, 2,  1,  5,  12, 15, 19, 2,  4,  1,  15, 13, 21, 5,  11, 5,  20, 17, 16, 4,  6,  1,  9,  14, 10,
    5,  4,  11, 11, 20, 6,  4,  9,  1,  8,  6,  6,  24, 9,  23, 7,  18, 5,  6,  21, 24, 16, 3,  8,  8,  22, 21,
    20, 1,  24, 2,  5,  11, 13, 3,  13, 15, 17, 15, 17, 14, 5,  21, 2,  9,  16, 17, 15, 23, 4,  19, 15, 18, 13,
    1,  21, 4,  13, 13, 18, 14, 6,  10, 11, 17, 11, 16, 1,  5,  15, 10, 22, 11, 22, 15, 13, 2,  7,  21, 16, 4,
    20, 20, 3,  12, 3,  24, 24, 21, 13, 19, 16, 3,  11, 5,  2,  23, 5,  17, 6,  12, 5,  23, 7,  5,  2,  18, 11,
    3,  23, 9,  19, 14, 17, 10, 22, 12, 16, 5,  11, 9,  4,  20, 1,  9,  9,  23, 23, 14, 23, 22, 7,  14, 19, 4,
    14, 2,  14, 17, 1,  17, 24, 8,  8,  4,  7,  7,  18, 14, 8,  5,  5,  15, 24, 14, 22, 4,  3,  12, 12, 2,  18,
    21, 3,  10, 23, 11, 24, 22, 19, 21, 3,  24, 16, 24, 11, 1,  20, 18, 2,  20, 21, 20, 16, 1,  8,  16, 23, 9,
    9,  15, 3,  15, 22, 6,  19, 19, 18, 21, 14, 15, 22, 17, 24, 24, 1,  13, 9,  14, 12, 1,  21, 14, 18, 13, 4,
    12, 16, 24, 15, 15, 23, 23, 3,  2,  10, 11, 5,  20, 24, 13, 11, 5,  6,  19, 10, 8,  17, 10, 21, 23, 10, 2,
    17, 12, 7,  4,  19, 1,  3,  17, 9,  2,  15, 21, 19, 22, 11, 13, 19, 20, 24, 13, 14, 1,  5,  15, 23, 3,  23,
    24, 19, 3,  4,  14, 23, 7,  2,  21, 8,  2,  17, 16, 4,  24, 23, 8,  13, 7,  17, 17, 4,  21, 12, 19, 15, 2,
    22, 14, 11, 21, 9,  20, 14, 10, 16, 14, 22, 4,  7,  7,  18, 1,  8,  10, 21, 9,  14, 24, 15, 8,  17, 1,  7,
    22, 11, 18, 23, 23, 2,  15, 8,  9,  18, 17, 22, 3,  9,  6,  2,  13, 10, 5,  17, 4,  19, 14, 22, 13, 20, 3,
    7,  13, 22, 7,  1,  17, 7,  1,  19, 21, 13, 7,  1,  8,  17, 3,  1,  4,  14, 16, 4,  11, 7,  24, 17, 21, 1,
    9,  8,  15, 20, 8,  24, 13, 22, 23, 10, 16, 9,  20, 15, 3,  17, 6,  12, 10, 8,  15, 19, 8,  5,  2,  24, 11,
    19, 9,  15, 14, 20, 9,  19, 19, 16, 6,  13, 16, 11, 21, 21, 1,  2,  3,  14, 24, 12, 6,  14, 10, 19, 5,  1,
    7,  4,  9,  4,  1,  3,  8,  15, 7,  11, 14, 7,  4,  3,  14, 12, 9,  8,  15, 17, 1,  6,  12, 16, 22, 12, 8,
    1,  9,  23, 11, 12, 9,  17, 14, 7,  8,  20, 4,  5,  21, 10, 8,  17, 9,  4,  1,  10, 19, 2,  4,  6,  7,  20,
    8,  22, 14, 14, 24, 11, 11, 10, 19, 16, 4,  16, 2,  24, 19, 2,  7,  21, 20, 6,  16, 7,  2,  16, 9,  6,  21,
    2,  1,  6,  12, 4,  21, 14, 11, 8,  14, 2,  3,  18, 4,  1,  19, 7,  6,  9,  22, 12, 17, 6,  23, 19, 14, 20,
    6,  20, 19, 7,  18, 4,  17, 12, 1,  6,  19, 8,  1,  13, 5,  5,  13, 3,  13, 8,  9,  14, 4,  4,  2,  16, 11,
    21, 22, 10, 15, 13, 16, 20, 15, 6,  19, 1,  7,  17, 22, 21, 4,  8,  4,  14, 1,  18, 17, 12, 23, 18, 7,  17,
    3,  17, 22, 18, 1,  5,  11, 12, 19, 16, 15, 16, 19, 3,  9,  14, 14, 10, 21, 13, 5,  10, 6,  21, 9,  4,  16,
    20, 11, 18, 20, 22, 11, 10, 6,  22, 21, 24, 8,  2,  17, 8,  1,  7,  20, 19, 4,  21, 22, 13, 20, 3,  13, 17,
    16, 1,  14, 16, 17, 20, 23, 1,  15, 14, 4,  22, 11, 13, 21, 14, 21, 11, 23, 18, 19, 13, 23, 2,  1,  20, 20,
    24, 19, 10, 19, 5,  2,  23, 21, 22, 19, 4,  16, 24, 12, 1,  8,  17, 17, 20, 5,  10, 7,  12, 20, 20, 24, 5,
    12, 11, 17, 19, 3,  15, 12, 19, 14, 4,  19, 4,  15, 19, 23, 23, 4,  8,  10, 4,  12, 8,  21, 2,  14, 16, 9,
    10, 18, 8,  8,  24, 11, 11, 2,  11, 9,  18, 13, 4,  9,  1,  20, 1,  14, 18, 24, 13, 6,  11, 24, 12, 1,  17,
    9,  6,  21, 11, 11, 6,  19, 1,  18, 24, 5,  19, 2,  15, 19, 11, 10, 16, 22, 11, 15, 11, 6,  19, 22, 5,  24,
    20};

TEST(test_peak_finding, peaks_only) {
    {
        //                   0  1  2  3  4  5  6  7
        std::vector<float> x{1, 1, 2, 1, 1, 2, 1, 1};
        pb::peaks_data data;
        std::vector<size_t> exp_peaks{2, 5};
        pb::FindPeaks(x, data);

        ASSERT_EQ(exp_peaks.size(), data.peaks.size());
        EXPECT_EQ(exp_peaks, data.peaks);
    }

    {
        std::vector<float> x{1, 2, 4, 2, 1};
        pb::peaks_data data;
        std::vector<size_t> exp_peaks{2};
        pb::FindPeaks(x, data);

        ASSERT_EQ(exp_peaks.size(), data.peaks.size());
        EXPECT_EQ(exp_peaks, data.peaks);
    }

    {
        pb::peaks_data data;
        std::vector<size_t> exp_peaks{2,  4,  6,  8,  12, 14, 18, 21, 24, 32, 35, 37, 41, 45, 47, 52,
                                      55, 59, 62, 65, 67, 69, 71, 74, 81, 84, 87, 89, 91, 95, 97};
        pb::FindPeaks(data_set_1, data);

        ASSERT_EQ(exp_peaks.size(), data.peaks.size());
        EXPECT_EQ(exp_peaks, data.peaks);
    }
}

// ./libs/pet-breathy/test_petbreathy --gtest_filter="*peaks_distance"
TEST(test_peak_finding, peaks_distance) {
    pb::peaks_data data;
    std::vector<size_t> exp_peaks{2, 8, 14, 21, 32, 37, 41, 45, 55, 59, 65, 69, 74, 81, 89, 95};

    std::optional<float> height = std::nullopt;
    const float distance = 4.0f;
    pb::FindPeaks(data_set_1, data, height, distance);

    ASSERT_EQ(exp_peaks.size(), data.peaks.size());
    EXPECT_EQ(exp_peaks, data.peaks);
}

TEST(test_peak_finding, peaks_height) {
    pb::peaks_data data;
    std::vector<size_t> exp_peaks{2, 14, 21, 32, 37, 52, 55, 59, 69, 74, 81};

    const float height = 22.0f;
    std::optional<float> distance = std::nullopt;
    pb::FindPeaks(data_set_1, data, height, distance);

    ASSERT_EQ(exp_peaks.size(), data.peaks.size());
    EXPECT_EQ(exp_peaks, data.peaks);
}

TEST(test_peak_finding, peaks_distance_height) {
    std::vector<size_t> exp_peaks{2, 14, 21, 32, 37, 55, 59, 69, 74, 81};

    const float height = 22.0f;
    const float distance = 4.0f;
    pb::peaks_data data;
    pb::FindPeaks(data_set_1, data, height, distance);

    ASSERT_EQ(exp_peaks.size(), data.peaks.size());
    EXPECT_EQ(exp_peaks, data.peaks);
}

//---

TEST(test_peak_finding, peaks_only_data_set_2) {
    pb::peaks_data data;
    std::vector<size_t> exp_peaks{
        5,   7,   15,  18,  22,  25,  28,  34,  37,  40,  44,  48,  50,  53,  55,  58,  62,  65,  68,  71,
        73,  77,  79,  82,  84,  86,  89,  92,  96,  98,  101, 104, 108, 111, 116, 118, 120, 122, 124, 127,
        129, 132, 134, 137, 140, 143, 146, 148, 151, 153, 155, 158, 161, 163, 165, 167, 171, 174, 177, 181,
        183, 185, 187, 190, 197, 199, 201, 203, 205, 207, 211, 214, 220, 223, 225, 228, 230, 232, 236, 241,
        245, 249, 253, 255, 258, 262, 264, 266, 268, 271, 275, 280, 282, 285, 287, 289, 294, 297, 300, 302,
        306, 309, 312, 314, 316, 318, 322, 325, 327, 329, 331, 333, 335, 338, 342, 345, 349, 351, 354, 357,
        363, 369, 371, 374, 378, 381, 383, 386, 388, 390, 393, 397, 403, 406, 409, 411, 414, 417, 419, 422,
        424, 427, 429, 434, 437, 442, 445, 450, 453, 456, 459, 463, 466, 470, 472, 477, 479, 483, 486, 491,
        494, 497, 500, 503, 505, 508, 510, 513, 516, 518, 521, 523, 527, 531, 534, 537, 540, 543, 546, 549,
        551, 553, 556, 559, 561, 563, 565, 569, 572, 576, 581, 586, 588, 590, 592, 594, 597, 599, 602, 604,
        606, 609, 611, 615, 619, 621, 623, 625, 627, 632, 634, 640, 643, 645, 648, 650, 655, 658, 662, 667,
        672, 677, 679, 681, 685, 688, 691, 696, 701, 703, 706, 710, 713, 715, 719, 722, 725, 728, 732, 734,
        738, 741, 744, 748, 750, 752, 755, 757, 760, 762, 766, 769, 772, 774, 777, 781, 784, 786, 789, 792,
        796, 799, 801, 803, 806, 809, 812, 818, 822, 825, 828, 831, 833, 837, 841, 845, 847, 850, 854, 858,
        860, 863, 870, 872, 875, 878, 880, 882, 884, 886, 891, 894, 897, 899, 903, 909, 911, 916, 918, 921,
        923, 925, 928, 932, 936, 938, 940, 943, 946, 949, 953, 955, 958, 960, 964, 968, 971, 974, 978, 981,
        983, 986, 990, 992, 996, 998};
    pb::FindPeaks(data_set_2, data);

    ASSERT_EQ(exp_peaks.size(), data.peaks.size());
    EXPECT_EQ(exp_peaks, data.peaks);
}

TEST(test_peak_finding, peaks_distance_data_set_2) {
    pb::peaks_data data;

    std::vector<size_t> exp_peaks{
        7,   15,  25,  34,  40,  44,  48,  53,  58,  62,  68,  73,  79,  84,  92,  96,  101, 108, 118, 124,
        132, 137, 143, 148, 153, 158, 163, 167, 174, 181, 187, 197, 203, 207, 214, 220, 228, 232, 236, 241,
        245, 249, 253, 258, 264, 271, 275, 280, 285, 289, 294, 302, 306, 312, 318, 325, 331, 338, 345, 349,
        357, 363, 369, 374, 378, 383, 390, 397, 403, 409, 414, 419, 427, 434, 445, 450, 456, 463, 472, 477,
        486, 491, 500, 508, 513, 518, 523, 527, 534, 543, 551, 559, 563, 569, 576, 581, 586, 590, 594, 599,
        606, 611, 615, 619, 625, 634, 640, 645, 650, 655, 662, 667, 672, 677, 681, 688, 696, 701, 706, 710,
        715, 719, 728, 734, 738, 744, 748, 752, 757, 762, 766, 772, 777, 784, 789, 796, 801, 806, 812, 818,
        822, 828, 833, 837, 841, 847, 854, 858, 863, 870, 875, 882, 886, 891, 897, 903, 909, 916, 921, 928,
        932, 936, 940, 949, 955, 960, 964, 968, 974, 981, 986, 990, 998};

    std::optional<float> height = std::nullopt;
    const float distance = 4.0f;
    pb::FindPeaks(data_set_2, data, height, distance);

    ASSERT_EQ(exp_peaks.size(), data.peaks.size());
    EXPECT_EQ(exp_peaks, data.peaks);
}

TEST(test_peak_finding, peaks_height_data_set_2) {
    pb::peaks_data data;
    std::vector<size_t> exp_peaks{15,  34,  37,  40,  44,  48,  58,  73,  82,  84,  92,  101, 108, 124, 127,
                                  143, 153, 155, 158, 163, 174, 181, 187, 228, 230, 236, 241, 245, 264, 287,
                                  289, 302, 312, 318, 325, 331, 342, 345, 357, 369, 371, 381, 383, 388, 390,
                                  403, 409, 417, 419, 434, 437, 445, 456, 472, 477, 483, 486, 491, 500, 513,
                                  523, 534, 540, 543, 551, 563, 569, 590, 599, 602, 619, 640, 672, 677, 703,
                                  706, 715, 748, 752, 784, 796, 806, 812, 841, 845, 847, 858, 870, 875, 882,
                                  886, 891, 897, 899, 903, 916, 932, 949, 964, 968, 981, 990, 996, 998};

    const float height = 22.0f;
    std::optional<float> distance = std::nullopt;
    pb::FindPeaks(data_set_2, data, height, distance);

    ASSERT_EQ(exp_peaks.size(), data.peaks.size());
    EXPECT_EQ(exp_peaks, data.peaks);
}

TEST(test_peak_finding, peaks_distance_height_data_set_2) {
    // Expected peaks from python find_peaks output.
    std::vector<size_t> exp_peaks{15,  34,  40,  44,  48,  58,  73,  84,  92,  101, 108, 124, 143, 153, 158,
                                  163, 174, 181, 187, 228, 236, 241, 245, 264, 289, 302, 312, 318, 325, 331,
                                  345, 357, 369, 383, 390, 403, 409, 419, 434, 445, 456, 472, 477, 486, 491,
                                  500, 513, 523, 534, 543, 551, 563, 569, 590, 599, 619, 640, 672, 677, 706,
                                  715, 748, 752, 784, 796, 806, 812, 841, 847, 858, 870, 875, 882, 886, 891,
                                  897, 903, 916, 932, 949, 964, 968, 981, 990, 998};

    const float height = 22.0f;
    const float distance = 4.0f;
    pb::peaks_data data;
    pb::FindPeaks(data_set_2, data, height, distance);

    ASSERT_EQ(exp_peaks.size(), data.peaks.size());
    EXPECT_EQ(exp_peaks, data.peaks);
}
